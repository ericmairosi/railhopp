#!/usr/bin/env node

/**
 * WebSocket Client Test - connects to your Railhopp WebSocket server
 * Demonstrates real-time updates (simulation mode)
 */

const WebSocket = require('ws');

console.log('üöÇ Railhopp WebSocket Client Test');
console.log('=================================');
console.log('üì° Connecting to local WebSocket server...');

const ws = new WebSocket('ws://localhost:3003');

ws.on('open', function open() {
  console.log('‚úÖ Connected to Railhopp WebSocket server!');
  console.log('üéÆ Server is running in simulation mode');
  console.log('üéß Listening for real-time updates...');
  console.log('');
  
  // Subscribe to train movements
  ws.send(JSON.stringify({
    action: 'subscribe',
    channel: 'train-movements'
  }));
  
  console.log('üì• Subscribed to train movements');
  console.log('‚è∞ Waiting for updates (every 30 seconds)...');
  console.log('');
});

ws.on('message', function message(data) {
  try {
    const update = JSON.parse(data.toString());
    console.log('üì¶ Received update:');
    console.log(`   üìç Type: ${update.type || 'unknown'}`);
    console.log(`   üïê Time: ${new Date().toLocaleTimeString()}`);
    
    if (update.type === 'train-movement') {
      console.log(`   üöÜ Train: ${update.data.trainId || 'N/A'}`);
      console.log(`   üìç Location: ${update.data.location || 'N/A'}`);
      console.log(`   ‚è∞ Event: ${update.data.eventType || 'N/A'}`);
      console.log(`   üïê Timestamp: ${update.data.timestamp || 'N/A'}`);
    } else if (update.type === 'td-update') {
      console.log(`   üì° TD Area: ${update.data.area || 'N/A'}`);
      console.log(`   üìç Berth: ${update.data.berth || 'N/A'}`);
      console.log(`   üöÜ Description: ${update.data.description || 'N/A'}`);
    } else if (update.type === 'connection-status') {
      console.log(`   üîó Status: ${update.data.status}`);
      console.log(`   üí° Message: ${update.data.message}`);
    }
    
    console.log('');
    
  } catch (error) {
    console.log('‚ö†Ô∏è  Received non-JSON message:', data.toString());
    console.log('');
  }
});

ws.on('error', function error(err) {
  console.error('‚ùå WebSocket error:', err.message);
  console.error('');
  console.error('üí° Make sure the server is running:');
  console.error('   cd websocket-server');
  console.error('   PORT=3003 node server.js');
});

ws.on('close', function close(code, reason) {
  console.log('üîå Connection closed');
  console.log(`   üìã Code: ${code}`);
  if (reason) {
    console.log(`   üìù Reason: ${reason.toString()}`);
  }
  console.log('');
  console.log('üëã Test completed!');
});

// Handle process termination
process.on('SIGINT', function() {
  console.log('\nüõë Test interrupted by user');
  ws.close();
});

// Auto-close after 2 minutes for demo
setTimeout(() => {
  console.log('‚è∞ Demo timeout - closing connection');
  ws.close();
}, 120000);
